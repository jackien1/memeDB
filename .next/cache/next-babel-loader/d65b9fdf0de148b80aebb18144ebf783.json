{"ast":null,"code":"import \"antd/lib/button/style/css\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/input/style/css\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/icon/style/css\";\nimport _Icon from \"antd/lib/icon\";\nimport \"antd/lib/card/style/css\";\nimport _Card from \"antd/lib/card\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"antd/lib/upload/style/css\";\nimport _Upload from \"antd/lib/upload\";\nvar _jsxFileName = \"/Users/jackieni/dev/personal/meme-database/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nlet ml5;\nlet featureExtractor;\nlet regressor;\nconst Dragger = _Upload.Dragger;\nimport firebase from \"firebase\";\nimport { ClimbingBoxLoader } from \"react-spinners\";\n\nif (false) {\n  ml5 = require(\"ml5\");\n  featureExtractor = ml5.featureExtractor(\"MobileNet\", () => {}, {\n    version: 1,\n    alpha: 1.0,\n    topk: 3,\n    learningRate: 0.0001,\n    hiddenUnits: 100,\n    epochs: 20,\n    numClasses: 2,\n    batchSize: 0.4\n  });\n  regressor = featureExtractor.regression();\n}\n\nvar config;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      text: \"\",\n      targetUri: \"\",\n      image: {},\n      targetImage: {},\n      memeTypes: [],\n      images: [],\n      memeCount: [],\n      response: \"\",\n      prediction: \"\",\n      loading: true,\n      loss: 0\n    });\n\n    _defineProperty(this, \"handleTrain\", async () => {\n      await regressor.train(lossValue => {\n        if (lossValue) {\n          let loss = lossValue;\n          this.setState({\n            loss\n          });\n        } else {\n          this.setState({\n            loss: 0\n          });\n        }\n      });\n    });\n\n    _defineProperty(this, \"handleUpload\", async () => {\n      this.setState({\n        response: \"\",\n        prediction: \"\"\n      });\n      const e = this.state.targetImage;\n      var formData = new FormData();\n      formData.append(\"image\", e);\n      const {\n        data\n      } = await axios({\n        method: \"post\",\n        url: \"https://api.imgur.com/3/image\",\n        data: formData,\n        headers: {\n          authorization: \"Client-ID 7e4e554040292df\"\n        }\n      });\n      this.setState({\n        targetUri: data.data.link\n      });\n    });\n\n    _defineProperty(this, \"handleIdentify\", () => {\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n\n      img.onload = async () => {\n        const {\n          value\n        } = await regressor.predict(img);\n        this.setState({\n          response: value,\n          prediction: this.state.memeTypes[Math.round(value) > this.state.memeTypes.length - 1 ? this.state.memeTypes.length - 1 : Math.round(value)]\n        });\n      };\n\n      img.src = this.state.targetUri;\n      img.width = 250;\n      img.height = 250;\n    });\n\n    _defineProperty(this, \"handleAdd\", async event => {\n      const e = this.state.image;\n      const newData = this.state.images;\n      var formData = new FormData();\n      formData.append(\"image\", e);\n      formData.append(\"name\", this.state.title);\n      const {\n        data\n      } = await axios({\n        method: \"post\",\n        url: \"https://api.imgur.com/3/image\",\n        data: formData,\n        headers: {\n          authorization: \"Client-ID 8d1d1c33ea509f6\"\n        }\n      });\n      let memeTypes = this.state.memeTypes;\n      let index = memeTypes.indexOf(this.state.text);\n\n      if (index == -1) {\n        memeTypes.push(this.state.text);\n      }\n\n      index = memeTypes.indexOf(this.state.text);\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n\n      img.onload = async () => {\n        await regressor.addImage(img, index);\n      };\n\n      img.src = data.data.link;\n      img.width = 250;\n      img.height = 250;\n      newData.push({\n        name: this.state.text,\n        uri: data.data.link\n      });\n      await firebase.database().ref().set({\n        data: newData,\n        types: memeTypes\n      });\n    });\n\n    _defineProperty(this, \"onTextChange\", event => {\n      this.setState({\n        text: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"renderCards\", () => {\n      return this.state.memeTypes.map((meme, index) => {\n        return __jsx(_Card, {\n          hoverable: true,\n          key: meme,\n          style: {\n            width: \"12vw\",\n            borderColor: meme == this.state.prediction ? \"#00e676\" : null\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 206\n          },\n          __self: this\n        }, __jsx(\"div\", {\n          style: {\n            color: \"black\",\n            fontSize: \"0.8vw\",\n            fontWeight: \"bold\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214\n          },\n          __self: this\n        }, meme), __jsx(\"div\", {\n          style: {\n            color: \"black\",\n            fontSize: \"0.8vw\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219\n          },\n          __self: this\n        }, `${this.state.memeCount[index] ? this.state.memeCount[index] : 0} Images`));\n      });\n    });\n  }\n\n  static async getInitialProps({\n    store,\n    query,\n    isServer,\n    test\n  }) {\n    config = {\n      apiKey: process.env.apiKey,\n      authDomain: process.env.authDomain,\n      databaseURL: process.env.databaseURL,\n      projectId: process.env.projectId,\n      storageBucket: process.env.storageBucket,\n      messagingSenderId: process.env.messagingSenderId\n    };\n    return {\n      config\n    };\n  }\n\n  async componentDidMount() {\n    if (!firebase.apps.length) {\n      await firebase.initializeApp(config);\n    }\n\n    const snapshot = await firebase.database().ref().once(\"value\");\n    const result = await snapshot.val();\n    const memeTypes = result.types;\n    let counter = 0;\n    this.setState({\n      images: result.data,\n      memeTypes\n    });\n    result.data.map(image => {\n      const index = memeTypes.indexOf(image.name);\n      const newMemeCount = this.state.memeCount;\n\n      if (newMemeCount[index]) {\n        newMemeCount[index]++;\n      } else {\n        newMemeCount[index] = 1;\n      }\n\n      this.setState({\n        memeCount: newMemeCount\n      });\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n\n      img.onload = async () => {\n        await regressor.addImage(img, index);\n        counter++;\n\n        if (counter == result.data.length - 1) {\n          this.setState({\n            loading: false\n          });\n        }\n      };\n\n      img.src = image.uri;\n      img.width = 250;\n      img.height = 250;\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        flexDirection: \"column\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      style: {\n        backgroundColor: \"black\",\n        postition: \"absolute\",\n        top: 0,\n        width: \"100vw\",\n        height: \"50vh\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 0,\n        width: \"60%\",\n        marginTop: \"1vh\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"space-between\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"row\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, __jsx(_Icon, {\n      type: \"area-chart\",\n      style: {\n        fontSize: \"2vw\",\n        display: \"flex\",\n        alignItems: \"center\",\n        color: \"white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      style: {\n        fontSize: \"2vw\",\n        fontWeight: \"bold\",\n        color: \"white\",\n        marginLeft: \"0.5vw\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"MemeDB\")), __jsx(\"div\", {\n      style: {\n        color: \"white\",\n        display: \"flex\",\n        alignItems: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, `Memes Known: ${this.state.memeTypes.length}`)), __jsx(\"div\", {\n      style: {\n        fontSize: \"6vw\",\n        fontWeight: \"bold\",\n        color: \"white\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        marginTop: \"10vh\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, \"Meme Classifier\")), !this.state.loading ? __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"space-evenly\",\n        width: \"100%\",\n        marginTop: \"2vh\",\n        marginBottom: \"2vh\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      style: {\n        fontWeight: \"bold\",\n        fontSize: \"3vw\",\n        color: \"black\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, \"Training Data\"), __jsx(_Input, {\n      onChange: this.onTextChange,\n      value: this.state.text,\n      placeholder: \"Meme name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }), __jsx(_Button, {\n      style: {\n        marginTop: \"2vh\",\n        backgroundColor: \"black\",\n        color: \"white\"\n      },\n      onClick: this.handleAdd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, __jsx(_Icon, {\n      type: \"plus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }), \"Add Image\")), __jsx(\"div\", {\n      style: {\n        width: \"30%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, __jsx(Dragger, {\n      showUploadList: false,\n      onChange: event => {\n        this.setState({\n          image: event.fileList[event.fileList.length - 1].originFileObj\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      className: \"ant-upload-drag-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }, __jsx(_Icon, {\n      type: \"inbox\",\n      style: {\n        color: \"black\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    })), __jsx(\"p\", {\n      className: \"ant-upload-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, \"Click or drag file to this area to upload\"), __jsx(\"p\", {\n      className: \"ant-upload-hint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, \"Support for a single or bulk upload. Strictly prohibit from uploading company data or other band files\")))), __jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        width: \"100vw\",\n        justifyContent: \"space-evenly\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, this.renderCards()), __jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        marginTop: \"2vh\",\n        marginBottom: \"2vh\",\n        justifyContent: \"space-evenly\",\n        width: \"100vw\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      style: {\n        fontWeight: \"bold\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, \"Loss\"), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, this.state.loss)), __jsx(_Button, {\n      style: {\n        backgroundColor: \"black\"\n      },\n      onClick: this.handleTrain,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, __jsx(_Icon, {\n      type: \"sliders\",\n      style: {\n        color: \"white\",\n        marginRight: \"0.5vw\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      style: {\n        color: \"white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, \"Train\")))), __jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        width: \"100%\",\n        justifyContent: \"space-evenly\",\n        marginBottom: \"2vh\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      style: {\n        width: \"30%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, __jsx(Dragger, {\n      showUploadList: false,\n      onChange: event => {\n        this.setState({\n          targetImage: event.fileList[event.fileList.length - 1].originFileObj\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      className: \"ant-upload-drag-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, __jsx(_Icon, {\n      type: \"inbox\",\n      style: {\n        color: \"black\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    })), __jsx(\"p\", {\n      className: \"ant-upload-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, \"Click or drag file to this area to upload\"), __jsx(\"p\", {\n      className: \"ant-upload-hint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }, \"Support for a single or bulk upload. Strictly prohibit from uploading company data or other band files\"))), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      style: {\n        fontWeight: \"bold\",\n        fontSize: \"3vw\",\n        color: \"black\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }, \"Target Data\"), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }, `Regression: ${this.state.response}`, \" \"), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }, `Prediction: ${this.state.prediction}`), __jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-evenly\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }, __jsx(_Button, {\n      style: {\n        marginTop: \"2vh\",\n        backgroundColor: \"black\",\n        color: \"white\"\n      },\n      onClick: this.handleUpload,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }, __jsx(_Icon, {\n      type: \"plus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }), \"Add Image\"), __jsx(_Button, {\n      style: {\n        marginTop: \"2vh\",\n        color: \"black\"\n      },\n      onClick: this.handleIdentify,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }, __jsx(_Icon, {\n      type: \"eye\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }), \"Predict\"))))) : __jsx(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"50vh\",\n        weight: \"100vw\",\n        flexDirection: \"column\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }, __jsx(ClimbingBoxLoader, {\n      style: {\n        width: \"20vw\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }), __jsx(\"div\", {\n      style: {\n        fontSize: \"1.2vw\",\n        fontWeight: \"bold\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }, \"Loading\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jackieni/dev/personal/meme-database/pages/index.js"],"names":["React","Component","axios","ml5","featureExtractor","regressor","Dragger","firebase","ClimbingBoxLoader","require","version","alpha","topk","learningRate","hiddenUnits","epochs","numClasses","batchSize","regression","config","App","text","targetUri","image","targetImage","memeTypes","images","memeCount","response","prediction","loading","loss","train","lossValue","setState","e","state","formData","FormData","append","data","method","url","headers","authorization","link","img","Image","crossOrigin","onload","value","predict","Math","round","length","src","width","height","event","newData","title","index","indexOf","push","addImage","name","uri","database","ref","set","types","target","map","meme","borderColor","color","fontSize","fontWeight","getInitialProps","store","query","isServer","test","apiKey","process","env","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","componentDidMount","apps","initializeApp","snapshot","once","result","val","counter","newMemeCount","render","display","alignItems","flexDirection","backgroundColor","postition","top","position","marginTop","justifyContent","marginLeft","marginBottom","onTextChange","handleAdd","fileList","originFileObj","renderCards","handleTrain","marginRight","handleUpload","handleIdentify","weight"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,IAAIC,GAAJ;AACA,IAAIC,gBAAJ;AACA,IAAIC,SAAJ;AACA,MAAMC,OAAO,GAAG,QAAOA,OAAvB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,iBAAT,QAAkC,gBAAlC;;AAEA,WAAmC;AACjCL,EAAAA,GAAG,GAAGM,OAAO,CAAC,KAAD,CAAb;AACAL,EAAAA,gBAAgB,GAAGD,GAAG,CAACC,gBAAJ,CAAqB,WAArB,EAAkC,MAAM,CAAE,CAA1C,EAA4C;AAC7DM,IAAAA,OAAO,EAAE,CADoD;AAE7DC,IAAAA,KAAK,EAAE,GAFsD;AAG7DC,IAAAA,IAAI,EAAE,CAHuD;AAI7DC,IAAAA,YAAY,EAAE,MAJ+C;AAK7DC,IAAAA,WAAW,EAAE,GALgD;AAM7DC,IAAAA,MAAM,EAAE,EANqD;AAO7DC,IAAAA,UAAU,EAAE,CAPiD;AAQ7DC,IAAAA,SAAS,EAAE;AARkD,GAA5C,CAAnB;AAUAZ,EAAAA,SAAS,GAAGD,gBAAgB,CAACc,UAAjB,EAAZ;AACD;;AAED,IAAIC,MAAJ;;AAEA,MAAMC,GAAN,SAAkBnB,SAAlB,CAA4B;AAAA;AAAA;;AAAA,mCAClB;AACNoB,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,SAAS,EAAE,EAFL;AAGNC,MAAAA,KAAK,EAAE,EAHD;AAINC,MAAAA,WAAW,EAAE,EAJP;AAKNC,MAAAA,SAAS,EAAE,EALL;AAMNC,MAAAA,MAAM,EAAE,EANF;AAONC,MAAAA,SAAS,EAAE,EAPL;AAQNC,MAAAA,QAAQ,EAAE,EARJ;AASNC,MAAAA,UAAU,EAAE,EATN;AAUNC,MAAAA,OAAO,EAAE,IAVH;AAWNC,MAAAA,IAAI,EAAE;AAXA,KADkB;;AAAA,yCA4EZ,YAAY;AACxB,YAAM1B,SAAS,CAAC2B,KAAV,CAAgBC,SAAS,IAAI;AACjC,YAAIA,SAAJ,EAAe;AACb,cAAIF,IAAI,GAAGE,SAAX;AACA,eAAKC,QAAL,CAAc;AAAEH,YAAAA;AAAF,WAAd;AACD,SAHD,MAGO;AACL,eAAKG,QAAL,CAAc;AAAEH,YAAAA,IAAI,EAAE;AAAR,WAAd;AACD;AACF,OAPK,CAAN;AAQD,KArFyB;;AAAA,0CAuFX,YAAY;AACzB,WAAKG,QAAL,CAAc;AAAEN,QAAAA,QAAQ,EAAE,EAAZ;AAAgBC,QAAAA,UAAU,EAAE;AAA5B,OAAd;AACA,YAAMM,CAAC,GAAG,KAAKC,KAAL,CAAWZ,WAArB;AACA,UAAIa,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,MAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBJ,CAAzB;AAEA,YAAM;AAAEK,QAAAA;AAAF,UAAW,MAAMtC,KAAK,CAAC;AAC3BuC,QAAAA,MAAM,EAAE,MADmB;AAE3BC,QAAAA,GAAG,EAAE,+BAFsB;AAG3BF,QAAAA,IAAI,EAAEH,QAHqB;AAI3BM,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAE;AADR;AAJkB,OAAD,CAA5B;AASA,WAAKV,QAAL,CAAc;AACZZ,QAAAA,SAAS,EAAEkB,IAAI,CAACA,IAAL,CAAUK;AADT,OAAd;AAGD,KAzGyB;;AAAA,4CA2GT,MAAM;AACrB,YAAMC,GAAG,GAAG,IAAIC,KAAJ,EAAZ;AACAD,MAAAA,GAAG,CAACE,WAAJ,GAAkB,WAAlB;;AACAF,MAAAA,GAAG,CAACG,MAAJ,GAAa,YAAY;AACvB,cAAM;AAAEC,UAAAA;AAAF,YAAY,MAAM7C,SAAS,CAAC8C,OAAV,CAAkBL,GAAlB,CAAxB;AACA,aAAKZ,QAAL,CAAc;AACZN,UAAAA,QAAQ,EAAEsB,KADE;AAEZrB,UAAAA,UAAU,EAAE,KAAKO,KAAL,CAAWX,SAAX,CACV2B,IAAI,CAACC,KAAL,CAAWH,KAAX,IAAoB,KAAKd,KAAL,CAAWX,SAAX,CAAqB6B,MAArB,GAA8B,CAAlD,GACI,KAAKlB,KAAL,CAAWX,SAAX,CAAqB6B,MAArB,GAA8B,CADlC,GAEIF,IAAI,CAACC,KAAL,CAAWH,KAAX,CAHM;AAFA,SAAd;AAQD,OAVD;;AAWAJ,MAAAA,GAAG,CAACS,GAAJ,GAAU,KAAKnB,KAAL,CAAWd,SAArB;AACAwB,MAAAA,GAAG,CAACU,KAAJ,GAAY,GAAZ;AACAV,MAAAA,GAAG,CAACW,MAAJ,GAAa,GAAb;AACD,KA5HyB;;AAAA,uCA8Hd,MAAMC,KAAN,IAAe;AACzB,YAAMvB,CAAC,GAAG,KAAKC,KAAL,CAAWb,KAArB;AACA,YAAMoC,OAAO,GAAG,KAAKvB,KAAL,CAAWV,MAA3B;AAEA,UAAIW,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,MAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBJ,CAAzB;AACAE,MAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwB,KAAKH,KAAL,CAAWwB,KAAnC;AAEA,YAAM;AAAEpB,QAAAA;AAAF,UAAW,MAAMtC,KAAK,CAAC;AAC3BuC,QAAAA,MAAM,EAAE,MADmB;AAE3BC,QAAAA,GAAG,EAAE,+BAFsB;AAG3BF,QAAAA,IAAI,EAAEH,QAHqB;AAI3BM,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAE;AADR;AAJkB,OAAD,CAA5B;AASA,UAAInB,SAAS,GAAG,KAAKW,KAAL,CAAWX,SAA3B;AAEA,UAAIoC,KAAK,GAAGpC,SAAS,CAACqC,OAAV,CAAkB,KAAK1B,KAAL,CAAWf,IAA7B,CAAZ;;AACA,UAAIwC,KAAK,IAAI,CAAC,CAAd,EAAiB;AACfpC,QAAAA,SAAS,CAACsC,IAAV,CAAe,KAAK3B,KAAL,CAAWf,IAA1B;AACD;;AACDwC,MAAAA,KAAK,GAAGpC,SAAS,CAACqC,OAAV,CAAkB,KAAK1B,KAAL,CAAWf,IAA7B,CAAR;AAEA,YAAMyB,GAAG,GAAG,IAAIC,KAAJ,EAAZ;AACAD,MAAAA,GAAG,CAACE,WAAJ,GAAkB,WAAlB;;AACAF,MAAAA,GAAG,CAACG,MAAJ,GAAa,YAAY;AACvB,cAAM5C,SAAS,CAAC2D,QAAV,CAAmBlB,GAAnB,EAAwBe,KAAxB,CAAN;AACD,OAFD;;AAGAf,MAAAA,GAAG,CAACS,GAAJ,GAAUf,IAAI,CAACA,IAAL,CAAUK,IAApB;AACAC,MAAAA,GAAG,CAACU,KAAJ,GAAY,GAAZ;AACAV,MAAAA,GAAG,CAACW,MAAJ,GAAa,GAAb;AAEAE,MAAAA,OAAO,CAACI,IAAR,CAAa;AACXE,QAAAA,IAAI,EAAE,KAAK7B,KAAL,CAAWf,IADN;AAEX6C,QAAAA,GAAG,EAAE1B,IAAI,CAACA,IAAL,CAAUK;AAFJ,OAAb;AAKA,YAAMtC,QAAQ,CACX4D,QADG,GAEHC,GAFG,GAGHC,GAHG,CAGC;AAAE7B,QAAAA,IAAI,EAAEmB,OAAR;AAAiBW,QAAAA,KAAK,EAAE7C;AAAxB,OAHD,CAAN;AAID,KAzKyB;;AAAA,0CA2KXiC,KAAK,IAAI;AACtB,WAAKxB,QAAL,CAAc;AAAEb,QAAAA,IAAI,EAAEqC,KAAK,CAACa,MAAN,CAAarB;AAArB,OAAd;AACD,KA7KyB;;AAAA,yCA+KZ,MAAM;AAClB,aAAO,KAAKd,KAAL,CAAWX,SAAX,CAAqB+C,GAArB,CAAyB,CAACC,IAAD,EAAOZ,KAAP,KAAiB;AAC/C,eACE;AACE,UAAA,SAAS,MADX;AAEE,UAAA,GAAG,EAAEY,IAFP;AAGE,UAAA,KAAK,EAAE;AACLjB,YAAAA,KAAK,EAAE,MADF;AAELkB,YAAAA,WAAW,EAAED,IAAI,IAAI,KAAKrC,KAAL,CAAWP,UAAnB,GAAgC,SAAhC,GAA4C;AAFpD,WAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAQE;AACE,UAAA,KAAK,EAAE;AAAE8C,YAAAA,KAAK,EAAE,OAAT;AAAkBC,YAAAA,QAAQ,EAAE,OAA5B;AAAqCC,YAAAA,UAAU,EAAE;AAAjD,WADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAGGJ,IAHH,CARF,EAaE;AAAK,UAAA,KAAK,EAAE;AAAEE,YAAAA,KAAK,EAAE,OAAT;AAAkBC,YAAAA,QAAQ,EAAE;AAA5B,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,GACA,KAAKxC,KAAL,CAAWT,SAAX,CAAqBkC,KAArB,IAA8B,KAAKzB,KAAL,CAAWT,SAAX,CAAqBkC,KAArB,CAA9B,GAA4D,CAC7D,SAHH,CAbF,CADF;AAqBD,OAtBM,CAAP;AAuBD,KAvMyB;AAAA;;AAe1B,eAAaiB,eAAb,CAA6B;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,QAAhB;AAA0BC,IAAAA;AAA1B,GAA7B,EAA+D;AAC7D/D,IAAAA,MAAM,GAAG;AACPgE,MAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYF,MADb;AAEPG,MAAAA,UAAU,EAAEF,OAAO,CAACC,GAAR,CAAYC,UAFjB;AAGPC,MAAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYE,WAHlB;AAIPC,MAAAA,SAAS,EAAEJ,OAAO,CAACC,GAAR,CAAYG,SAJhB;AAKPC,MAAAA,aAAa,EAAEL,OAAO,CAACC,GAAR,CAAYI,aALpB;AAMPC,MAAAA,iBAAiB,EAAEN,OAAO,CAACC,GAAR,CAAYK;AANxB,KAAT;AASA,WAAO;AACLvE,MAAAA;AADK,KAAP;AAGD;;AAED,QAAMwE,iBAAN,GAA0B;AACxB,QAAI,CAACpF,QAAQ,CAACqF,IAAT,CAActC,MAAnB,EAA2B;AACzB,YAAM/C,QAAQ,CAACsF,aAAT,CAAuB1E,MAAvB,CAAN;AACD;;AAED,UAAM2E,QAAQ,GAAG,MAAMvF,QAAQ,CAC5B4D,QADoB,GAEpBC,GAFoB,GAGpB2B,IAHoB,CAGf,OAHe,CAAvB;AAIA,UAAMC,MAAM,GAAG,MAAMF,QAAQ,CAACG,GAAT,EAArB;AACA,UAAMxE,SAAS,GAAGuE,MAAM,CAAC1B,KAAzB;AAEA,QAAI4B,OAAO,GAAG,CAAd;AACA,SAAKhE,QAAL,CAAc;AACZR,MAAAA,MAAM,EAAEsE,MAAM,CAACxD,IADH;AAEZf,MAAAA;AAFY,KAAd;AAKAuE,IAAAA,MAAM,CAACxD,IAAP,CAAYgC,GAAZ,CAAgBjD,KAAK,IAAI;AACvB,YAAMsC,KAAK,GAAGpC,SAAS,CAACqC,OAAV,CAAkBvC,KAAK,CAAC0C,IAAxB,CAAd;AACA,YAAMkC,YAAY,GAAG,KAAK/D,KAAL,CAAWT,SAAhC;;AACA,UAAIwE,YAAY,CAACtC,KAAD,CAAhB,EAAyB;AACvBsC,QAAAA,YAAY,CAACtC,KAAD,CAAZ;AACD,OAFD,MAEO;AACLsC,QAAAA,YAAY,CAACtC,KAAD,CAAZ,GAAsB,CAAtB;AACD;;AAED,WAAK3B,QAAL,CAAc;AACZP,QAAAA,SAAS,EAAEwE;AADC,OAAd;AAIA,YAAMrD,GAAG,GAAG,IAAIC,KAAJ,EAAZ;AACAD,MAAAA,GAAG,CAACE,WAAJ,GAAkB,WAAlB;;AACAF,MAAAA,GAAG,CAACG,MAAJ,GAAa,YAAY;AACvB,cAAM5C,SAAS,CAAC2D,QAAV,CAAmBlB,GAAnB,EAAwBe,KAAxB,CAAN;AACAqC,QAAAA,OAAO;;AACP,YAAIA,OAAO,IAAIF,MAAM,CAACxD,IAAP,CAAYc,MAAZ,GAAqB,CAApC,EAAuC;AACrC,eAAKpB,QAAL,CAAc;AAAEJ,YAAAA,OAAO,EAAE;AAAX,WAAd;AACD;AACF,OAND;;AAOAgB,MAAAA,GAAG,CAACS,GAAJ,GAAUhC,KAAK,CAAC2C,GAAhB;AACApB,MAAAA,GAAG,CAACU,KAAJ,GAAY,GAAZ;AACAV,MAAAA,GAAG,CAACW,MAAJ,GAAa,GAAb;AACD,KAzBD;AA0BD;;AA+HD2C,EAAAA,MAAM,GAAG;AACP,WACE;AACE,MAAA,KAAK,EAAE;AACLC,QAAAA,OAAO,EAAE,MADJ;AAELC,QAAAA,UAAU,EAAE,QAFP;AAGLC,QAAAA,aAAa,EAAE;AAHV,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOE;AACE,MAAA,KAAK,EAAE;AACLC,QAAAA,eAAe,EAAE,OADZ;AAELC,QAAAA,SAAS,EAAE,UAFN;AAGLC,QAAAA,GAAG,EAAE,CAHA;AAILlD,QAAAA,KAAK,EAAE,OAJF;AAKLC,QAAAA,MAAM,EAAE;AALH,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAiBE;AACE,MAAA,KAAK,EAAE;AACLkD,QAAAA,QAAQ,EAAE,UADL;AAELD,QAAAA,GAAG,EAAE,CAFA;AAGLlD,QAAAA,KAAK,EAAE,KAHF;AAILoD,QAAAA,SAAS,EAAE;AAJN,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQE;AACE,MAAA,KAAK,EAAE;AACLP,QAAAA,OAAO,EAAE,MADJ;AAELE,QAAAA,aAAa,EAAE,KAFV;AAGLM,QAAAA,cAAc,EAAE;AAHX,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOE;AAAK,MAAA,KAAK,EAAE;AAAER,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,UAAU,EAAE;AAA/B,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,IAAI,EAAC,YADP;AAEE,MAAA,KAAK,EAAE;AACL1B,QAAAA,QAAQ,EAAE,KADL;AAELyB,QAAAA,OAAO,EAAE,MAFJ;AAGLC,QAAAA,UAAU,EAAE,QAHP;AAIL3B,QAAAA,KAAK,EAAE;AAJF,OAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAUE;AACE,MAAA,KAAK,EAAE;AACLC,QAAAA,QAAQ,EAAE,KADL;AAELC,QAAAA,UAAU,EAAE,MAFP;AAGLF,QAAAA,KAAK,EAAE,OAHF;AAILmC,QAAAA,UAAU,EAAE;AAJP,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF,CAPF,EA6BE;AACE,MAAA,KAAK,EAAE;AAAEnC,QAAAA,KAAK,EAAE,OAAT;AAAkB0B,QAAAA,OAAO,EAAE,MAA3B;AAAmCC,QAAAA,UAAU,EAAE;AAA/C,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGI,gBAAe,KAAKlE,KAAL,CAAWX,SAAX,CAAqB6B,MAAO,EAH/C,CA7BF,CARF,EA4CE;AACE,MAAA,KAAK,EAAE;AACLsB,QAAAA,QAAQ,EAAE,KADL;AAELC,QAAAA,UAAU,EAAE,MAFP;AAGLF,QAAAA,KAAK,EAAE,OAHF;AAIL0B,QAAAA,OAAO,EAAE,MAJJ;AAKLQ,QAAAA,cAAc,EAAE,QALX;AAMLD,QAAAA,SAAS,EAAE;AANN,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBA5CF,CAjBF,EA2EG,CAAC,KAAKxE,KAAL,CAAWN,OAAZ,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,KAAK,EAAE;AACLuE,QAAAA,OAAO,EAAE,MADJ;AAELE,QAAAA,aAAa,EAAE,KAFV;AAGLM,QAAAA,cAAc,EAAE,cAHX;AAILrD,QAAAA,KAAK,EAAE,MAJF;AAKLoD,QAAAA,SAAS,EAAE,KALN;AAMLG,QAAAA,YAAY,EAAE;AANT,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,KAAK,EAAE;AACLlC,QAAAA,UAAU,EAAE,MADP;AAELD,QAAAA,QAAQ,EAAE,KAFL;AAGLD,QAAAA,KAAK,EAAE;AAHF,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAWE;AACE,MAAA,QAAQ,EAAE,KAAKqC,YADjB;AAEE,MAAA,KAAK,EAAE,KAAK5E,KAAL,CAAWf,IAFpB;AAGE,MAAA,WAAW,EAAC,WAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,EAiBE;AACE,MAAA,KAAK,EAAE;AACLuF,QAAAA,SAAS,EAAE,KADN;AAELJ,QAAAA,eAAe,EAAE,OAFZ;AAGL7B,QAAAA,KAAK,EAAE;AAHF,OADT;AAME,MAAA,OAAO,EAAE,KAAKsC,SANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQE;AAAM,MAAA,IAAI,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,cAjBF,CAVF,EAwCE;AAAK,MAAA,KAAK,EAAE;AAAEzD,QAAAA,KAAK,EAAE;AAAT,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,OAAD;AACE,MAAA,cAAc,EAAE,KADlB;AAEE,MAAA,QAAQ,EAAEE,KAAK,IAAI;AACjB,aAAKxB,QAAL,CAAc;AACZX,UAAAA,KAAK,EACHmC,KAAK,CAACwD,QAAN,CAAexD,KAAK,CAACwD,QAAN,CAAe5D,MAAf,GAAwB,CAAvC,EAA0C6D;AAFhC,SAAd;AAID,OAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASE;AAAG,MAAA,SAAS,EAAC,sBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,IAAI,EAAC,OAAX;AAAmB,MAAA,KAAK,EAAE;AAAExC,QAAAA,KAAK,EAAE;AAAT,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CATF,EAYE;AAAG,MAAA,SAAS,EAAC,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAZF,EAeE;AAAG,MAAA,SAAS,EAAC,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gHAfF,CADF,CAxCF,CADF,EAgEE;AACE,MAAA,KAAK,EAAE;AACL0B,QAAAA,OAAO,EAAE,MADJ;AAELE,QAAAA,aAAa,EAAE,KAFV;AAGL/C,QAAAA,KAAK,EAAE,OAHF;AAILqD,QAAAA,cAAc,EAAE;AAJX,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQG,KAAKO,WAAL,EARH,CAhEF,EA0EE;AACE,MAAA,KAAK,EAAE;AACLf,QAAAA,OAAO,EAAE,MADJ;AAELE,QAAAA,aAAa,EAAE,KAFV;AAGLK,QAAAA,SAAS,EAAE,KAHN;AAILG,QAAAA,YAAY,EAAE,KAJT;AAKLF,QAAAA,cAAc,EAAE,cALX;AAMLrD,QAAAA,KAAK,EAAE;AANF,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAUE;AACE,MAAA,KAAK,EAAE;AACL6C,QAAAA,OAAO,EAAE,MADJ;AAELE,QAAAA,aAAa,EAAE,QAFV;AAGLM,QAAAA,cAAc,EAAE,QAHX;AAILP,QAAAA,UAAU,EAAE;AAJP,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQE;AAAK,MAAA,KAAK,EAAE;AAAEzB,QAAAA,UAAU,EAAE;AAAd,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKzC,KAAL,CAAWL,IAAjB,CATF,CAVF,EAsBE;AACE,MAAA,KAAK,EAAE;AACLyE,QAAAA,eAAe,EAAE;AADZ,OADT;AAIE,MAAA,OAAO,EAAE,KAAKa,WAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAME;AACE,MAAA,KAAK,EAAE;AACLhB,QAAAA,OAAO,EAAE,MADJ;AAELE,QAAAA,aAAa,EAAE,KAFV;AAGLM,QAAAA,cAAc,EAAE,QAHX;AAILP,QAAAA,UAAU,EAAE;AAJP,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQE;AACE,MAAA,IAAI,EAAC,SADP;AAEE,MAAA,KAAK,EAAE;AACL3B,QAAAA,KAAK,EAAE,OADF;AAEL2C,QAAAA,WAAW,EAAE;AAFR,OAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,EAeE;AAAK,MAAA,KAAK,EAAE;AAAE3C,QAAAA,KAAK,EAAE;AAAT,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAfF,CANF,CAtBF,CA1EF,EAyHE;AACE,MAAA,KAAK,EAAE;AACL0B,QAAAA,OAAO,EAAE,MADJ;AAELE,QAAAA,aAAa,EAAE,KAFV;AAGL/C,QAAAA,KAAK,EAAE,MAHF;AAILqD,QAAAA,cAAc,EAAE,cAJX;AAKLE,QAAAA,YAAY,EAAE;AALT,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASE;AAAK,MAAA,KAAK,EAAE;AAAEvD,QAAAA,KAAK,EAAE;AAAT,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,OAAD;AACE,MAAA,cAAc,EAAE,KADlB;AAEE,MAAA,QAAQ,EAAEE,KAAK,IAAI;AACjB,aAAKxB,QAAL,CAAc;AACZV,UAAAA,WAAW,EACTkC,KAAK,CAACwD,QAAN,CAAexD,KAAK,CAACwD,QAAN,CAAe5D,MAAf,GAAwB,CAAvC,EAA0C6D;AAFhC,SAAd;AAID,OAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASE;AAAG,MAAA,SAAS,EAAC,sBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,IAAI,EAAC,OAAX;AAAmB,MAAA,KAAK,EAAE;AAAExC,QAAAA,KAAK,EAAE;AAAT,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CATF,EAYE;AAAG,MAAA,SAAS,EAAC,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAZF,EAeE;AAAG,MAAA,SAAS,EAAC,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gHAfF,CADF,CATF,EAgCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,KAAK,EAAE;AACLE,QAAAA,UAAU,EAAE,MADP;AAELD,QAAAA,QAAQ,EAAE,KAFL;AAGLD,QAAAA,KAAK,EAAE;AAHF,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAO,eAAc,KAAKvC,KAAL,CAAWR,QAAS,EAAzC,MAXF,EAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAO,eAAc,KAAKQ,KAAL,CAAWP,UAAW,EAA3C,CAZF,EAcE;AACE,MAAA,KAAK,EAAE;AAAEwE,QAAAA,OAAO,EAAE,MAAX;AAAmBQ,QAAAA,cAAc,EAAE;AAAnC,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGE;AACE,MAAA,KAAK,EAAE;AACLD,QAAAA,SAAS,EAAE,KADN;AAELJ,QAAAA,eAAe,EAAE,OAFZ;AAGL7B,QAAAA,KAAK,EAAE;AAHF,OADT;AAME,MAAA,OAAO,EAAE,KAAK4C,YANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQE;AAAM,MAAA,IAAI,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,cAHF,EAcE;AACE,MAAA,KAAK,EAAE;AACLX,QAAAA,SAAS,EAAE,KADN;AAELjC,QAAAA,KAAK,EAAE;AAFF,OADT;AAKE,MAAA,OAAO,EAAE,KAAK6C,cALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOE;AAAM,MAAA,IAAI,EAAC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,YAdF,CAdF,CAhCF,CAzHF,CADD,GAqMC;AACE,MAAA,KAAK,EAAE;AACLnB,QAAAA,OAAO,EAAE,MADJ;AAELQ,QAAAA,cAAc,EAAE,QAFX;AAGLP,QAAAA,UAAU,EAAE,QAHP;AAIL7C,QAAAA,MAAM,EAAE,MAJH;AAKLgE,QAAAA,MAAM,EAAE,OALH;AAMLlB,QAAAA,aAAa,EAAE;AANV,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAUE,MAAC,iBAAD;AAAmB,MAAA,KAAK,EAAE;AAAE/C,QAAAA,KAAK,EAAE;AAAT,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,EAWE;AAAK,MAAA,KAAK,EAAE;AAAEoB,QAAAA,QAAQ,EAAE,OAAZ;AAAqBC,QAAAA,UAAU,EAAE;AAAjC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAXF,CAhRJ,CADF;AAiSD;;AA3eyB;;AA8e5B,eAAezD,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Button, Input, Icon, Upload, Card, Statistic, Row, Col } from \"antd\";\nimport axios from \"axios\";\nlet ml5;\nlet featureExtractor;\nlet regressor;\nconst Dragger = Upload.Dragger;\nimport firebase from \"firebase\";\nimport { ClimbingBoxLoader } from \"react-spinners\";\n\nif (typeof window !== \"undefined\") {\n  ml5 = require(\"ml5\");\n  featureExtractor = ml5.featureExtractor(\"MobileNet\", () => {}, {\n    version: 1,\n    alpha: 1.0,\n    topk: 3,\n    learningRate: 0.0001,\n    hiddenUnits: 100,\n    epochs: 20,\n    numClasses: 2,\n    batchSize: 0.4\n  });\n  regressor = featureExtractor.regression();\n}\n\nvar config;\n\nclass App extends Component {\n  state = {\n    text: \"\",\n    targetUri: \"\",\n    image: {},\n    targetImage: {},\n    memeTypes: [],\n    images: [],\n    memeCount: [],\n    response: \"\",\n    prediction: \"\",\n    loading: true,\n    loss: 0\n  };\n\n  static async getInitialProps({ store, query, isServer, test }) {\n    config = {\n      apiKey: process.env.apiKey,\n      authDomain: process.env.authDomain,\n      databaseURL: process.env.databaseURL,\n      projectId: process.env.projectId,\n      storageBucket: process.env.storageBucket,\n      messagingSenderId: process.env.messagingSenderId\n    };\n\n    return {\n      config\n    };\n  }\n\n  async componentDidMount() {\n    if (!firebase.apps.length) {\n      await firebase.initializeApp(config);\n    }\n\n    const snapshot = await firebase\n      .database()\n      .ref()\n      .once(\"value\");\n    const result = await snapshot.val();\n    const memeTypes = result.types;\n\n    let counter = 0;\n    this.setState({\n      images: result.data,\n      memeTypes\n    });\n\n    result.data.map(image => {\n      const index = memeTypes.indexOf(image.name);\n      const newMemeCount = this.state.memeCount;\n      if (newMemeCount[index]) {\n        newMemeCount[index]++;\n      } else {\n        newMemeCount[index] = 1;\n      }\n\n      this.setState({\n        memeCount: newMemeCount\n      });\n\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.onload = async () => {\n        await regressor.addImage(img, index);\n        counter++;\n        if (counter == result.data.length - 1) {\n          this.setState({ loading: false });\n        }\n      };\n      img.src = image.uri;\n      img.width = 250;\n      img.height = 250;\n    });\n  }\n\n  handleTrain = async () => {\n    await regressor.train(lossValue => {\n      if (lossValue) {\n        let loss = lossValue;\n        this.setState({ loss });\n      } else {\n        this.setState({ loss: 0 });\n      }\n    });\n  };\n\n  handleUpload = async () => {\n    this.setState({ response: \"\", prediction: \"\" });\n    const e = this.state.targetImage;\n    var formData = new FormData();\n    formData.append(\"image\", e);\n\n    const { data } = await axios({\n      method: \"post\",\n      url: \"https://api.imgur.com/3/image\",\n      data: formData,\n      headers: {\n        authorization: \"Client-ID 7e4e554040292df\"\n      }\n    });\n\n    this.setState({\n      targetUri: data.data.link\n    });\n  };\n\n  handleIdentify = () => {\n    const img = new Image();\n    img.crossOrigin = \"anonymous\";\n    img.onload = async () => {\n      const { value } = await regressor.predict(img);\n      this.setState({\n        response: value,\n        prediction: this.state.memeTypes[\n          Math.round(value) > this.state.memeTypes.length - 1\n            ? this.state.memeTypes.length - 1\n            : Math.round(value)\n        ]\n      });\n    };\n    img.src = this.state.targetUri;\n    img.width = 250;\n    img.height = 250;\n  };\n\n  handleAdd = async event => {\n    const e = this.state.image;\n    const newData = this.state.images;\n\n    var formData = new FormData();\n    formData.append(\"image\", e);\n    formData.append(\"name\", this.state.title);\n\n    const { data } = await axios({\n      method: \"post\",\n      url: \"https://api.imgur.com/3/image\",\n      data: formData,\n      headers: {\n        authorization: \"Client-ID 8d1d1c33ea509f6\"\n      }\n    });\n\n    let memeTypes = this.state.memeTypes;\n\n    let index = memeTypes.indexOf(this.state.text);\n    if (index == -1) {\n      memeTypes.push(this.state.text);\n    }\n    index = memeTypes.indexOf(this.state.text);\n\n    const img = new Image();\n    img.crossOrigin = \"anonymous\";\n    img.onload = async () => {\n      await regressor.addImage(img, index);\n    };\n    img.src = data.data.link;\n    img.width = 250;\n    img.height = 250;\n\n    newData.push({\n      name: this.state.text,\n      uri: data.data.link\n    });\n\n    await firebase\n      .database()\n      .ref()\n      .set({ data: newData, types: memeTypes });\n  };\n\n  onTextChange = event => {\n    this.setState({ text: event.target.value });\n  };\n\n  renderCards = () => {\n    return this.state.memeTypes.map((meme, index) => {\n      return (\n        <Card\n          hoverable\n          key={meme}\n          style={{\n            width: \"12vw\",\n            borderColor: meme == this.state.prediction ? \"#00e676\" : null\n          }}\n        >\n          <div\n            style={{ color: \"black\", fontSize: \"0.8vw\", fontWeight: \"bold\" }}\n          >\n            {meme}\n          </div>\n          <div style={{ color: \"black\", fontSize: \"0.8vw\" }}>\n            {`${\n              this.state.memeCount[index] ? this.state.memeCount[index] : 0\n            } Images`}\n          </div>\n        </Card>\n      );\n    });\n  };\n\n  render() {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          flexDirection: \"column\"\n        }}\n      >\n        <div\n          style={{\n            backgroundColor: \"black\",\n            postition: \"absolute\",\n            top: 0,\n            width: \"100vw\",\n            height: \"50vh\"\n          }}\n        />\n\n        <div\n          style={{\n            position: \"absolute\",\n            top: 0,\n            width: \"60%\",\n            marginTop: \"1vh\"\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              justifyContent: \"space-between\"\n            }}\n          >\n            <div style={{ display: \"flex\", alignItems: \"row\" }}>\n              <Icon\n                type=\"area-chart\"\n                style={{\n                  fontSize: \"2vw\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  color: \"white\"\n                }}\n              />\n              <div\n                style={{\n                  fontSize: \"2vw\",\n                  fontWeight: \"bold\",\n                  color: \"white\",\n                  marginLeft: \"0.5vw\"\n                }}\n              >\n                MemeDB\n              </div>\n            </div>\n\n            <div\n              style={{ color: \"white\", display: \"flex\", alignItems: \"center\" }}\n            >\n              {`Memes Known: ${this.state.memeTypes.length}`}\n            </div>\n          </div>\n\n          <div\n            style={{\n              fontSize: \"6vw\",\n              fontWeight: \"bold\",\n              color: \"white\",\n              display: \"flex\",\n              justifyContent: \"center\",\n              marginTop: \"10vh\"\n            }}\n          >\n            Meme Classifier\n          </div>\n        </div>\n\n        {!this.state.loading ? (\n          <div>\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"space-evenly\",\n                width: \"100%\",\n                marginTop: \"2vh\",\n                marginBottom: \"2vh\"\n              }}\n            >\n              <div>\n                <div\n                  style={{\n                    fontWeight: \"bold\",\n                    fontSize: \"3vw\",\n                    color: \"black\"\n                  }}\n                >\n                  Training Data\n                </div>\n\n                <Input\n                  onChange={this.onTextChange}\n                  value={this.state.text}\n                  placeholder=\"Meme name\"\n                />\n\n                <Button\n                  style={{\n                    marginTop: \"2vh\",\n                    backgroundColor: \"black\",\n                    color: \"white\"\n                  }}\n                  onClick={this.handleAdd}\n                >\n                  <Icon type=\"plus\" />\n                  Add Image\n                </Button>\n              </div>\n\n              <div style={{ width: \"30%\" }}>\n                <Dragger\n                  showUploadList={false}\n                  onChange={event => {\n                    this.setState({\n                      image:\n                        event.fileList[event.fileList.length - 1].originFileObj\n                    });\n                  }}\n                >\n                  <p className=\"ant-upload-drag-icon\">\n                    <Icon type=\"inbox\" style={{ color: \"black\" }} />\n                  </p>\n                  <p className=\"ant-upload-text\">\n                    Click or drag file to this area to upload\n                  </p>\n                  <p className=\"ant-upload-hint\">\n                    Support for a single or bulk upload. Strictly prohibit from\n                    uploading company data or other band files\n                  </p>\n                </Dragger>\n              </div>\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                width: \"100vw\",\n                justifyContent: \"space-evenly\"\n              }}\n            >\n              {this.renderCards()}\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                marginTop: \"2vh\",\n                marginBottom: \"2vh\",\n                justifyContent: \"space-evenly\",\n                width: \"100vw\"\n              }}\n            >\n              <div\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\"\n                }}\n              >\n                <div style={{ fontWeight: \"bold\" }}>Loss</div>\n                <div>{this.state.loss}</div>\n              </div>\n\n              <Button\n                style={{\n                  backgroundColor: \"black\"\n                }}\n                onClick={this.handleTrain}\n              >\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\"\n                  }}\n                >\n                  <Icon\n                    type=\"sliders\"\n                    style={{\n                      color: \"white\",\n                      marginRight: \"0.5vw\"\n                    }}\n                  />\n                  <div style={{ color: \"white\" }}>Train</div>\n                </div>\n              </Button>\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\",\n                width: \"100%\",\n                justifyContent: \"space-evenly\",\n                marginBottom: \"2vh\"\n              }}\n            >\n              <div style={{ width: \"30%\" }}>\n                <Dragger\n                  showUploadList={false}\n                  onChange={event => {\n                    this.setState({\n                      targetImage:\n                        event.fileList[event.fileList.length - 1].originFileObj\n                    });\n                  }}\n                >\n                  <p className=\"ant-upload-drag-icon\">\n                    <Icon type=\"inbox\" style={{ color: \"black\" }} />\n                  </p>\n                  <p className=\"ant-upload-text\">\n                    Click or drag file to this area to upload\n                  </p>\n                  <p className=\"ant-upload-hint\">\n                    Support for a single or bulk upload. Strictly prohibit from\n                    uploading company data or other band files\n                  </p>\n                </Dragger>\n              </div>\n\n              <div>\n                <div\n                  style={{\n                    fontWeight: \"bold\",\n                    fontSize: \"3vw\",\n                    color: \"black\"\n                  }}\n                >\n                  Target Data\n                </div>\n\n                <div>{`Regression: ${this.state.response}`} </div>\n                <div>{`Prediction: ${this.state.prediction}`}</div>\n\n                <div\n                  style={{ display: \"flex\", justifyContent: \"space-evenly\" }}\n                >\n                  <Button\n                    style={{\n                      marginTop: \"2vh\",\n                      backgroundColor: \"black\",\n                      color: \"white\"\n                    }}\n                    onClick={this.handleUpload}\n                  >\n                    <Icon type=\"plus\" />\n                    Add Image\n                  </Button>\n                  <Button\n                    style={{\n                      marginTop: \"2vh\",\n                      color: \"black\"\n                    }}\n                    onClick={this.handleIdentify}\n                  >\n                    <Icon type=\"eye\" />\n                    Predict\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              height: \"50vh\",\n              weight: \"100vw\",\n              flexDirection: \"column\"\n            }}\n          >\n            <ClimbingBoxLoader style={{ width: \"20vw\" }} />\n            <div style={{ fontSize: \"1.2vw\", fontWeight: \"bold\" }}>Loading</div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}